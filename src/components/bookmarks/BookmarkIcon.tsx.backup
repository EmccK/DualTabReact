/**
 * 书签图标组件
 * 支持文字、图片、favicon三种类型
 */

import React from 'react';
import { colorWithOpacity } from '@/utils/gradient/customGradientUtils';
import { extractDomain, isInternalDomain } from '@/utils/icon-utils';
import type { BookmarkItem } from '@/types/bookmark-style.types';
import type { Bookmark } from '@/types';

interface BookmarkIconProps {
  bookmark: BookmarkItem | Bookmark;
  size: number;
  borderRadius: number;
  className?: string;
}

const BookmarkIcon: React.FC<BookmarkIconProps> = ({
  bookmark,
  size,
  borderRadius,
  className = '',
}) => {
  const iconStyle: React.CSSProperties = {
    width: size,
    height: size,
    borderRadius: `${borderRadius}px`,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: Math.round(size * 0.4),
    fontWeight: 'bold',
    color: 'white',
    overflow: 'hidden',
    flexShrink: 0,
  };

  // 统一图标类型处理
  const getIconType = () => {
    if (!bookmark.iconType) return 'favicon';
    if (bookmark.iconType === 'official') return 'favicon';
    if (bookmark.iconType === 'upload') return 'image';
    return bookmark.iconType;
  };

  const iconType = getIconType();

  // 获取图标图片URL
  const getIconImage = () => {
    // 对于Bookmark类型，可能有iconData字段
    if ('iconData' in bookmark && bookmark.iconData) {
      return bookmark.iconData;
    }
    // 对于BookmarkItem类型，使用iconImage字段
    if ('iconImage' in bookmark && bookmark.iconImage) {
      return bookmark.iconImage;
    }
    // 对于Bookmark类型，可能有icon字段
    if ('icon' in bookmark && bookmark.icon) {
      return bookmark.icon;
    }
    return null;
  };

  // 渲染文字图标
  if (iconType === 'text') {
    const backgroundColor = bookmark.iconColor || '#3b82f6';
    const text = bookmark.iconText || bookmark.title.slice(0, 2);

    return (
      <div
        className={`${className}`}
        style={{
          ...iconStyle,
          backgroundColor,
        }}
      >
        <span style={{
          lineHeight: 1,
          whiteSpace: 'nowrap',
          fontSize: text.length > 2 ? Math.round(size * 0.3) : Math.round(size * 0.4),
        }}>
          {text}
        </span>
      </div>
    );
  }

  // 渲染图片图标
  if (iconType === 'image') {
    const iconImage = getIconImage();
    if (iconImage) {
      // 获取背景颜色配置
      const backgroundColor = bookmark.imageScale?.backgroundColor;
      const backgroundOpacity = bookmark.imageScale?.backgroundOpacity ?? 100;

      // 处理背景颜色：如果没有设置或透明度为0，则使用透明背景
      const rgbaBackground = backgroundColor && backgroundOpacity > 0
        ? colorWithOpacity(backgroundColor, backgroundOpacity)
        : 'transparent';

      return (
        <div
          className={`${className}`}
          style={{
            ...iconStyle,
            backgroundColor: rgbaBackground,
          }}
        >
          <img
            src={iconImage}
            alt={bookmark.title}
            style={{
              width: '100%',
              height: '100%',
              objectFit: 'cover',
              borderRadius: `${borderRadius}px`,
            }}
            onError={(e) => {
              // 图片加载失败时显示文字
              const target = e.target as HTMLImageElement;
              const parent = target.parentElement;
              if (parent) {
                parent.innerHTML = bookmark.title.slice(0, 2);
                parent.style.backgroundColor = bookmark.iconColor || '#3b82f6';
              }
            }}
          />
        </div>
      );
    }
  }

  // 渲染favicon图标 - 简化版本
  if (iconType === 'favicon') {
    const domain = extractDomain(bookmark.url);

    // 内网地址显示特殊图标
    if (isInternalDomain(domain)) {
      return (
        <div
          className={`${className} bg-orange-50 text-orange-600 font-medium`}
          style={{
            ...iconStyle,
            fontSize: size * 0.5,
          }}
        >
          🏠
        </div>
      );
    }

    // 使用Google Favicons API
    const faviconUrl = `https://www.google.com/s2/favicons?domain=${domain}&sz=${Math.min(size, 64)}`;

    return (
      <div
        className={`${className} bg-white`}
        style={{
          ...iconStyle,
          padding: size * 0.1,
        }}
      >
        <img
          src={faviconUrl}
          alt={bookmark.title}
          style={{
            width: '100%',
            height: '100%',
            objectFit: 'contain',
            borderRadius: `${borderRadius * 0.5}px`,
          }}
          onError={(e) => {
            // favicon加载失败时显示文字
            const target = e.target as HTMLImageElement;
            const parent = target.parentElement;
            if (parent) {
              parent.innerHTML = bookmark.title.slice(0, 2).toUpperCase();
              parent.style.backgroundColor = bookmark.iconColor || '#3b82f6';
              parent.style.color = 'white';
              parent.style.padding = '0';
              parent.style.fontSize = `${size * 0.35}px`;
            }
          }}
        />
      </div>
    );
  }

  // 默认文字图标
  return (
    <div
      className={`${className}`}
      style={{
        ...iconStyle,
        backgroundColor: bookmark.iconColor || '#3b82f6',
      }}
    >
      {bookmark.title.slice(0, 2)}
    </div>
  );
};

export default BookmarkIcon;
