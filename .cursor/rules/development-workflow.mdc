---
description: 
globs: 
alwaysApply: false
---
# DualTab 开发与重构工作流

本文档描述了DualTab项目的开发、重构、构建和测试流程。

## 重构工作流

### 重构步骤
1. **分析原始代码**：理解原代码功能和实现方式
2. **制定重构计划**：确定重构范围和分步骤实施计划
3. **按功能模块重构**：从核心模块开始，逐步扩展到次要功能
4. **增量实现**：每次只实现一个子功能，完成后进行测试
5. **保持记录**：更新TASKS.md文件，记录已完成任务和实现方式
6. **代码评审**：重构完成后进行代码评审，确保质量和一致性

### 功能测试
1. **单功能测试**：每个子功能完成后单独测试
2. **集成测试**：多个功能模块完成后进行集成测试
3. **回归测试**：确保重构不影响已有功能
4. **UI/UX测试**：确保用户体验符合预期

## 开发环境

- 使用Vite作为开发服务器和构建工具
- 使用React和TypeScript进行组件开发
- 使用Shadcn/UI组件库构建用户界面
- 使用TailwindCSS进行样式设计
- 使用ESLint进行代码质量检查

## 项目命令

通过[package.json](mdc:package.json)中定义的脚本可以执行以下命令：

- `npm run dev`: 启动开发服务器
- `npm run build`: 构建生产版本
- `npm run build:check`: 运行TypeScript检查并构建
- `npm run lint`: 运行ESLint代码质量检查
- `npm run preview`: 预览构建后的应用

## 构建流程

Vite配置[vite.config.js](mdc:vite.config.js)定义了多个入口点，构建过程会生成Chrome扩展所需的所有文件：

1. 新标签页 (newtab.html)
2. 弹出窗口 (popup.html)
3. 背景脚本 (background.js)
4. 内容脚本 (content-script.js)

## 扩展测试

1. 运行`npm run build`生成扩展文件到`dist`目录
2. 在Chrome浏览器中打开`chrome://extensions/`
3. 启用"开发者模式"
4. 点击"加载已解压的扩展程序"按钮
5. 选择项目的`dist`目录
6. 打开新标签页和点击扩展图标测试功能

## 优化原则

- **性能优化**：使用React.memo, useMemo, useCallback减少不必要的渲染
- **代码分割**：使用React.lazy实现代码分割和按需加载
- **文件拆分**：将大文件拆分为更小的模块，遵循单一职责原则
- **状态管理**：使用React Hooks进行状态管理，避免复杂的状态逻辑

## 代码提交流程

1. 确保代码通过ESLint检查 (`npm run lint`)
2. 确保应用可以成功构建 (`npm run build:check`)
3. 确保新功能在Chrome扩展环境中正常工作
4. 提交代码，使用清晰的提交消息描述更改
