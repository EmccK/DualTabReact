---
description: 
globs: 
alwaysApply: false
---
# DualTab React组件架构

本项目使用React和TypeScript构建用户界面组件，结合了Shadcn/UI组件库和TailwindCSS进行样式设计。

## 组件设计原则
- **单一职责**：每个组件只负责一个功能，增强可维护性和可测试性
- **合理分层**：将UI、状态管理和业务逻辑分离，保持组件清晰
- **复用优先**：优先使用和创建可复用组件，减少代码重复
- **性能优化**：使用React.memo, useMemo, useCallback避免不必要的渲染
- **类型安全**：使用TypeScript类型定义确保类型安全
- **状态管理**：使用React Hooks进行状态管理和副作用处理

## 组件拆分指南
- 当组件超过200行代码时，考虑拆分成多个子组件
- 当组件有明确可分离的视觉或功能部分时进行拆分
- 当相同的UI模式在多处使用时，提取为可复用组件
- 拆分后的组件应该有明确的输入输出（props和事件）

## React性能优化
```jsx
// 避免不必要的重渲染
const MemoizedComponent = React.memo(MyComponent);

// 缓存计算结果
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

// 缓存回调函数
const memoizedCallback = useCallback(() => doSomething(a, b), [a, b]);

// 惰性初始化状态
const [state, setState] = useState(() => computeInitialState());
```

## Shadcn/UI组件使用指南
- 优先使用Shadcn/UI提供的组件，保持UI一致性
- 组件可以根据需要进行样式定制，但保持基础功能一致
- 对于复杂交互场景，可以组合多个基础组件构建
- 遵循Shadcn/UI的暗色/亮色主题切换模式

## 错误处理与边界
- 使用错误边界组件捕获渲染错误
- 为异步操作提供加载状态和错误状态
- 实现优雅的降级策略，确保核心功能可用

## 主要组件

### 应用入口
- [App](mdc:src/App.tsx): 主应用入口组件，在开发模式下使用
- [NewTabApp](mdc:src/pages/newtab/NewTabApp.tsx): 新标签页应用组件，在扩展中替代Chrome默认新标签页
- [PopupApp](mdc:src/pages/popup/PopupApp.tsx): 弹出窗口应用组件，点击扩展图标时显示

### 状态管理
使用React的useState和useEffect进行状态管理和副作用处理：
```tsx
const [mounted, setMounted] = useState(false)

useEffect(() => {
  setMounted(true)
  console.log('[DEBUG] App mounted')
}, [])
```

## 样式约定
- 使用TailwindCSS的工具类进行样式设计
- 页面布局使用Flex和Grid系统
- 响应式设计使用TailwindCSS的断点系统 (sm, md, lg, xl)
