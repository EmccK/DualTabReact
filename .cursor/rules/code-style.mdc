---
description: 
globs: 
alwaysApply: false
---
# DualTab 代码风格与重构指南

本项目遵循以下代码风格和约定，确保代码一致性、可维护性和重构质量。

## 重构原则

- **保持功能一致性**：重构后的功能应与原始功能完全相同
- **增量式重构**：分步骤重构，每步完成后进行测试验证
- **代码现代化**：使用最新React特性和最佳实践重构旧代码
- **性能优化**：重构过程中注意提高性能和减少资源消耗
- **用户体验**：重视加载时间、响应速度和交互流畅度

## TypeScript 约定

- 使用TypeScript类型定义，避免使用`any`类型
- 对所有组件props和状态使用接口定义
- 使用可选链操作符(`?.`)和空值合并操作符(`??`)处理可能为空的值
- 导出类型和接口时使用命名导出
- 对API响应和存储数据创建专用类型

## React 最佳实践

- 使用函数组件和Hooks，避免使用类组件
- 状态更新时使用函数形式，特别是依赖于先前状态的更新
- 使用解构赋值获取props和状态
- 拆分大型组件为多个小组件，提高可维护性
- 使用React.lazy和Suspense实现代码分割和懒加载
- 使用ErrorBoundary处理渲染错误

## 文件组织结构

- 按功能组织文件，而不是按类型
- 组件相关的样式、测试和类型应放在同一目录下
- 可重用组件应放在`src/components`目录下
- 辅助函数应放在`src/utils`目录下
- 自定义钩子应放在`src/hooks`目录下
- 数据模型和相关逻辑放在`src/models`目录下
- 类型定义放在`src/types`目录下

## 命名约定

- 组件文件使用PascalCase命名（如`BookmarkCard.tsx`）
- 非组件文件使用kebab-case命名（如`bookmark-utils.ts`）
- 组件名与文件名保持一致
- 接口名称前不使用`I`前缀
- 常量使用UPPER_SNAKE_CASE命名
- 变量和函数使用camelCase命名
- Hook名称以use开头（如`useBookmarks`）
